package tests

import (
	"database/sql"
	"library-management/controllers"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/DATA-DOG/go-sqlmock"
	"github.com/gin-gonic/gin"
	"github.com/stretchr/testify/assert"
)

// Setup mock database
func setupDisapproveIssueTestDB(t *testing.T) sqlmock.Sqlmock {
	db, mock, err := sqlmock.New()
	assert.NoError(t, err)
	return mock
}

// ✅ Test Disapproving an Issue Request Successfully
func TestDisapproveIssueSuccess(t *testing.T) {
	mockDB := setupDisapproveIssueTestDB(t)

	// Mock checking if request exists
	mockDB.ExpectQuery("SELECT * FROM request_events WHERE id = ?").
		WithArgs(1).
		WillReturnRows(sqlmock.NewRows([]string{"id"}).AddRow(1))

	// Mock deleting the request
	mockDB.ExpectExec("DELETE FROM request_events WHERE id = ?").
		WithArgs(1).
		WillReturnResult(sqlmock.NewResult(1, 1))

	router := gin.Default()
	router.PUT("/api/issue/disapprove/:id", controllers.DisapproveIssue)

	req, _ := http.NewRequest("PUT", "/api/issue/disapprove/1", nil)
	req.Header.Set("Authorization", "Bearer mock-admin-token")

	w := httptest.NewRecorder()
	router.ServeHTTP(w, req)

	assert.Equal(t, http.StatusOK, w.Code)
	assert.Contains(t, w.Body.String(), "Issue request disapproved")
}

// ❌ Test Disapproving a Non-Existent Request
func TestDisapproveIssueNotFound(t *testing.T) {
	mockDB := setupDisapproveIssueTestDB(t)

	// Mock checking if request does not exist
	mockDB.ExpectQuery("SELECT * FROM request_events WHERE id = ?").
		WithArgs(99).
		WillReturnError(sql.ErrNoRows)

	router := gin.Default()
	router.PUT("/api/issue/disapprove/:id", controllers.DisapproveIssue)

	req, _ := http.NewRequest("PUT", "/api/issue/disapprove/99", nil)
	req.Header.Set("Authorization", "Bearer mock-admin-token")

	w := httptest.NewRecorder()
	router.ServeHTTP(w, req)

	assert.Equal(t, http.StatusNotFound, w.Code)
	assert.Contains(t, w.Body.String(), "Issue request not found")
}
